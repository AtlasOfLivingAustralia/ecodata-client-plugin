buildscript {
    repositories {
        mavenLocal()
        maven { url "https://nexus.ala.org.au/content/groups/public/" }
        maven { url "https://repo.grails.org/grails/core" }
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
        classpath 'com.bmuschko:gradle-clover-plugin:3.0.3'
        classpath 'org.grails.plugins:quartz:2.0.13'
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:$webdriverBinariesVersion"
    }
}
plugins {
    id 'jacoco'
}


version "6.1"
group "org.grails.plugins"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply from: "${project.projectDir}/gradle/publish.gradle"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"
apply plugin:"com.github.erdi.webdriver-binaries"
if (Boolean.valueOf(enableClover)) {
    apply from: "${project.projectDir}/gradle/clover.gradle"
}
if (Boolean.valueOf(enableJacoco)) {
    apply from: "${project.projectDir}/gradle/jacoco.gradle"
}


repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
}

boolean inplace = false

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:gsp"
    implementation 'commons-io:commons-io:2.6'
    implementation "org.grails.plugins:ala-auth:5.1.1"
    implementation 'org.pac4j:pac4j-core:5.3.1'
    implementation 'org.pac4j:pac4j-http:5.3.1'

    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    implementation "org.grails:grails-plugin-services"
    implementation "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.grails.plugins:geb"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-safari-driver:$seleniumSafariDriverVersion"
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"


    if (!inplace) {
        implementation ("org.grails.plugins:ala-map-plugin:4.0.1") {
            exclude group: 'com.bertramlabs.plugins', module: 'asset-pipeline-grails'
        }
    }
    implementation "com.bertramlabs.plugins:asset-pipeline-core:$assetPipelineVersion"
}

tasks.withType(Test) {
    systemProperty 'geb.env', System.getProperty('geb.env') ?: 'chromeHeadless'
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat 'full'
    }
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}
// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false

assets {
    packagePlugin = true
}

if (inplace) {
    grails {
        plugins {
            implementation (project(':ala-map-plugin'))
        }
    }
}

task _Events {
    doLast {
        println "Running _Events.groovy script"
        println "${project.projectDir}/_Events.groovy"
        new GroovyScriptEngine(["${project.projectDir}"] as String[]).run("_Events.groovy", new Binding(['projectDir': project.projectDir]))
    }
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}


// the tasks used here for dependsOn may be incomplete/incorrect
assetCompile.dependsOn(_Events)
compileGroovy.dependsOn(_Events)
bootRun.dependsOn(_Events)
